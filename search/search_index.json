{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django Landing Page Engine","text":"<p>A scalable Django-powered landing page system that serves 40+ domains from one backend.</p> <p>Built for high conversion, SEO-friendly, and easy A/B testing.</p>"},{"location":"#features","title":"\ud83e\udde0 Features","text":"<ul> <li>Serve unique landing pages per domain</li> <li>Dynamic sections (hero, benefits, CTA)</li> <li>Stripe payments across all domains</li> <li>Posthog analytics for tracking</li> <li>Legal pages (terms, privacy)</li> <li>Sitemap.xml + robots.txt support</li> <li>Fully responsive templates</li> </ul>"},{"location":"#why-this-matters","title":"\ud83d\ude80 Why This Matters","text":"<p>You can: - Launch 40 domains from one Django app - Track performance per landing page - Run A/B tests using template variations - Scale without rewriting code</p> <p>Let\u2019s dive into how it works.</p>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#deploymentmd-deploying-to-linode","title":"<code>deployment.md</code> \u2013 Deploying to Linode","text":"<pre><code># Deployment Guide\n\nHow to deploy the Django landing page engine to production (Linode or any Linux server).\n\n---\n\n## \ud83d\ude80 Prerequisites\n\n- \u2705 Django app working locally\n- \u2705 40 domains ready\n- \u2705 Nginx configured to accept all domains\n- \u2705 Gunicorn + Uvicorn (or Daphne) running\n- \u2705 Static/media files collected\n- \u2705 Stripe &amp; Posthog keys added\n\n---\n\n## \ud83e\uddf1 Steps to Deploy\n\n1. Download code\n2. Install dependencies, make migrations, run initial setup with my install.sh:\n```bash\nchmod +x install.sh\n./install.sh\n</code></pre> <ol> <li>Set up VPS following this guide: https://github.com/cangeorgecode/django_vps_setup</li> <li>In the /etc/nginx/sites-available/app_name (Nginx file):</li> </ol> <pre><code>server {\n    listen 80;\n    server_name &lt;domain_name&gt;;\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/var/www/django_app/&lt;app1_name&gt;.sock;\n    }\n}\n</code></pre> <p>In the \"domain_name\", add all the domain names you are routing to the app</p> <ol> <li>When you run certbot to obtain SSL, you must do it for all domains in one go. If you do one domain at a time, it won't work. </li> </ol>"},{"location":"models/","title":"Django Models Overview","text":"<p>The core of the landing page engine is built around these models:</p>"},{"location":"models/#page-model","title":"\ud83e\uddfe Page Model","text":"<p>Stores the main landing page data.</p> <pre><code>class Page(models.Model):\n    title = models.CharField(max_length=255)\n    slug = AutoSlugField(populate_from='title')\n    description = models.TextField(blank=True, null=True)\n    is_active = models.BooleanField(default=True)\n\n    # SEO Fields\n    meta_title = models.CharField(max_length=60, help_text=\"SEO title (max 60 chars)\", blank=True)\n    meta_description = models.CharField(max_length=160, help_text=\"SEO description\", blank=True)\n\n    # Pricing\n    original_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n    current_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n    pricing_benefits = models.TextField(blank=True, default=\"Functional Website Template\\nResponsive Design\\nContact Form\\nDjango Admin Panel\\nEasy Setup\")\n\n</code></pre>"},{"location":"models/#domain-model","title":"Domain Model","text":"<p>Maps domains to pages.</p> <pre><code>class Domain(models.Model):\n    name = models.CharField(max_length=255, unique=True)\n    page = models.ForeignKey(Page, on_delete=models.CASCADE, related_name='domains')\n</code></pre>"},{"location":"models/#section-model","title":"Section Model","text":"<p>Renders dynamic copy per landing page</p> <pre><code>class Section(models.Model):\n    SECTION_TYPES = [\n        ('hero', 'Hero'),\n        ('benefits', 'Benefits'),\n        ('pricing', 'Pricing'),\n        ('faq', 'FAQ'),\n        ('final_cta', 'Final CTA')\n    ]\n\n    page = models.ForeignKey(Page, on_delete=models.CASCADE)\n    section_type = models.CharField(max_length=20, choices=SECTION_TYPES)\n    order = models.PositiveIntegerField()\n    heading = models.CharField(max_length=255, blank=True)\n    content = models.TextField(blank=True)\n    button_text = models.CharField(max_length=100, blank=True)\n    button_link = models.URLField(blank=True)\n</code></pre>"},{"location":"models/#faq-model","title":"FAQ model","text":"<p>Reusable questions across all landing pages</p> <pre><code>class FAQ(models.Model):\n    page = models.ForeignKey(Page, on_delete=models.CASCADE)\n    question = models.CharField(max_length=255)\n    answer = models.TextField()\n    order = models.PositiveIntegerField(default=0)\n</code></pre>"},{"location":"posthog/","title":"Posthog Tracking","text":""},{"location":"posthog/#posthogmd-conversion-tracking","title":"<code>posthog.md</code> \u2013 Conversion Tracking","text":"<pre><code># Posthog Tracking\n\nUsed to track which domains convert best.\n\n---\n\n## \ud83e\uddf0 Events Tracked\n\n| Event | When It Fires |\n|-------|---------------|\n| `page_view` | On landing page load |\n| `cta_clicked` | When someone clicks \u201cBuy Now\u201d |\n| `purchase_completed` | After successful payment |\n\n---\n\n## \ud83d\udcc8 How to Analyze in Posthog\n\nGo to [Posthog Insights](https://app.posthog.com/insight/trend )\n\nClick **\u201cBreak down by property\u201d** \u2192 choose `landing_domain`\n\nBuild funnels like:\n\n1. `page_view_with_domain`\n2. `cta_clicked`\n3. `purchase_completed`\n\nFilter by:\n- Domain\n- Date\n- Email (if available)\n\n---\n\n## \ud83d\udce6 Optional: Export Data\n\nUse Posthog API or CSV export to get:\n\n```bash\ncurl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     \"https://app.posthog.com/api/projects/your_project_id/insights/trend/ \" \\\n     --get \\\n     --data-urlencode \"events=[{'id':'page_view','type':'events','order':0}]\" \\\n     --data-urlencode \"breakdown=landing_domain\" \\\n     --data-urlencode \"date_from=-30d\"\n</code></pre> <p>Save results \u2192 build dashboards \u2192 optimize conversions.</p>"},{"location":"stripe/","title":"Stripe Integration","text":""},{"location":"stripe/#stripemd-payment-flow","title":"<code>stripe.md</code> \u2013 Payment Flow","text":"<pre><code># Stripe Integration\n\nStripe handles all purchases across 40 domains using one webhook and price ID.\n\n---\n\n## \ud83e\uddf1 Key Files\n\n- `settings.py` \u2013 API keys, price ID\n- `views.py` \u2013 Checkout + Webhook logic\n- `UserPayment` \u2013 Tracks who paid\n- `DOMAIN_MODEL` \u2013 Maps domains to pages\n\n---\n\n## \ud83d\udee0 Setup Instructions\n\n### 1. Get Stripe Keys\n\nAdd to `.env` or shell:\n\n```bash\nexport STRIPE_SECRET_KEY=sk_test_XXXXXXXXXXXXXX\nexport STRIPE_WEBHOOK_SECRET=whsec_XXXXXXXXXXXXX\nexport STRIPE_PRICE_ID=price_XXXXXXXXXXXXXX\n</code></pre>"},{"location":"stripe/#2-get-webhook-secrets-from-developer-tab-in-stripe-for-production","title":"2. Get Webhook secrets from \"Developer\" tab in Stripe (for production)","text":""},{"location":"stripe/#21-for-testings-run-stripe-in-cli-to-test-webhook","title":"2.1 For testings, run stripe in cli to test webhook:","text":"<pre><code>stripe listen --forward-to http://localhost:8000/stripe/webhook/\n</code></pre> <p>Don't forget the trailing /</p> <p>Replace \"/stripe/webhook/\" with your webhook path</p>"},{"location":"stripe/#3-webhook-flow","title":"3 Webhook flow","text":"<ol> <li>Visitor lands on yourmaindomain.com  </li> <li>Clicks \u201cBuy Now\u201d  </li> <li>Redirected to Stripe Checkout</li> <li>Stripe sends webhook to yourmaindomain.com/webhook/stripe/</li> <li>Webhook finds origin domain via client_reference_id</li> <li>Generates pre-signed S3 link</li> <li>Sends to Posthog for tracking</li> <li>Redirects user to /download/?url=PRE_SIGNED_S3_URL</li> </ol>"},{"location":"templates/","title":"Templates","text":""},{"location":"templates/#templatesmd-how-templates-work","title":"<code>templates.md</code> \u2013 How Templates Work","text":"<pre><code># Templates\n\nAll landing pages extend `base.html`  \nEach domain uses the same set of templates but shows different content via `Section` model.\n\n---\n\n## \ud83e\uddf1 Base Template (`base.html`)\n\n```HTML\n{% load static tailwind_tags %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" data-theme=\"dark\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n    {% tailwind_css %}\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui @latest/dist/full.min.css\" /&gt;\n    &lt;script defer src=\"{% static 'htmx.min.js' %}\"&gt;&lt;/script&gt;\n    &lt;script defer src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.7/gsap.min.js \"&gt;&lt;/script&gt;\n\n    &lt;!-- Posthog --&gt;\n    &lt;script src=\"//app.posthog.com/js/ph.js\" async&gt;&lt;/script&gt;\n    &lt;script&gt;\n        posthog.init(\"your_posthog_api_key\", {\n          api_host: \"https://app.posthog.com \",\n          person_profiles: 'always'\n        });\n    &lt;/script&gt;\n\n    &lt;!-- Google Fonts --&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Inter :wght@400;600;700&amp;family=Fira+Code&amp;display=swap\" rel=\"stylesheet\"&gt;\n\n    &lt;!-- Custom Styles --&gt;\n    &lt;style&gt;\n        .glow { box-shadow: 0 0 15px rgba(255, 107, 0, 0.4); }\n        body { font-family: 'Inter', sans-serif; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body class=\"min-h-screen bg-gradient-to-br from-base-100 via-neutral-50 to-base-100 text-base-content flex flex-col\"&gt;\n    {% include \"partials/navbar.html\" %}\n    {% block content %}{% endblock %}\n    {% include \"partials/footer.html\" %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"templates/#landing-page-template-landing_page_neonhtml","title":"Landing page template (landing_page_neon.html)","text":"<pre><code>{% extends \"base.html\" %}\n{% load custom_filters %}\n\n{% block content %}\n    {% for section in page.sections.all %}\n        {% if section.section_type == 'hero' %}\n            &lt;!-- Hero Section --&gt;\n        {% elif section.section_type == 'benefits' %}\n            &lt;!-- Benefits Section --&gt;\n        {% elif section.section_type == 'how_it_works' %}\n            &lt;!-- How It Works Section --&gt;\n        {% elif section.section_type == 'pricing' %}\n            &lt;!-- Pricing Section --&gt;\n        {% elif section.section_type == 'faq' %}\n            &lt;!-- FAQ Section --&gt;\n        {% elif section.section_type == 'final_cta' %}\n            &lt;!-- Final CTA --&gt;\n        {% endif %}\n    {% endfor %}\n{% endblock %}\n</code></pre>"},{"location":"views/","title":"Views","text":""},{"location":"views/#viewsmd-core-logic","title":"<code>views.md</code> \u2013 Core Logic","text":"<pre><code># Views &amp; Webhooks\n\nAll logic lives in `core/views.py`.\n\n---\n\n## \ud83d\udee0 Key Views\n\n### `landing_page(request)`\nDetects domain \u2192 renders correct landing page\n\n```python\ndef landing_page(request):\n    raw_host = request.get_host()\n    host = raw_host.split(':')[0].lower().strip()\n\n    try:\n        domain = Domain.objects.select_related('page').get(name__iexact=host)\n        page = domain.page\n    except Domain.DoesNotExist:\n        return HttpResponse(\"Domain not live yet.\", status=404)\n\n    return render(request, 'landing_page_neon.html', {'page': page})\n</code></pre>"},{"location":"views/#stripe-integration","title":"Stripe integration","text":"<pre><code>def checkout(request):\n    session = stripe.checkout.Session.create(\n        payment_method_types=['card'],\n        line_items=[{\n            'price': settings.STRIPE_PRICE_ID,\n            'quantity': 1\n        }],\n        mode='payment',\n        success_url=settings.BASE_URL + reverse(\"payment_successful\") + \"?session_id={CHECKOUT_SESSION_ID}\",\n        cancel_url=settings.BASE_URL + reverse(\"payment_cancelled\"),\n        client_reference_id=request.get_host(),\n    )\n    return redirect(session.url, code=303)\n</code></pre>"},{"location":"views/#stripe-webhook","title":"Stripe webhook","text":"<pre><code>@require_POST\n@csrf_exempt\ndef webhook(request):\n    payload = request.body\n    sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')\n\n    try:\n        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)\n    except ValueError:\n        logger.error(\"Invalid payload\")\n        return HttpResponse(status=400)\n    except stripe.error.SignatureVerificationError:\n        logger.error(\"Signature verification failed\")\n        return HttpResponse(status=400)\n\n    if event['type'] == 'checkout.session.completed':\n        session = event['data']['object']\n        email = session.customer_details.email\n        domain = session.client_reference_id\n\n        download_url = generate_presigned_url(email)\n        UserPayment.objects.create(email=email, download_url=download_url)\n\n        posthog.capture(domain, 'purchase_completed', {\n            'email': email,\n            'domain': domain\n        })\n\n        return HttpResponse(status=200)\n    return HttpResponse(status=204)\n</code></pre>"},{"location":"views/#dynamic-sitemap","title":"Dynamic sitemap","text":"<pre><code>from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.utils import timezone\n\ndef sitemap_xml(request):\n    domain = request.get_host().split(':')[0].lower()\n    return render(request, 'sitemap.xml', {\n        'domain': domain,\n        'today': timezone.now()\n    }, content_type='application/xml')\n</code></pre>"},{"location":"views/#dynamic-robotstxt","title":"Dynamic robots.txt","text":"<pre><code>def robots_txt(request):\n    domain = request.get_host().split(':')[0].lower()\n    return render(request, 'robots.txt', {\n        'domain': domain\n    }, content_type='text/plain')\n</code></pre>"}]}